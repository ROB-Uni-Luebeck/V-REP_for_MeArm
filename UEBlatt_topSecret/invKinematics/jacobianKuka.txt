{Index in position 2 exceeds array bounds (must not
exceed 4).

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('sym/subsref', 'C:\Program Files\MATLAB\R2019a\toolbox\symbolic\symbolic\@sym\sym.m', 890)" style="font-weight:bold">sym/subsref</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2019a\toolbox\symbolic\symbolic\@sym\sym.m',890,0)">line 890</a>)
            R_tilde = builtin('subsref',L_tilde,Idx);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('createJacobianKuka', 'C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\createJacobianKuka.m', 22)" style="font-weight:bold">createJacobianKuka</a> (<a href="matlab: opentoline('C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\createJacobianKuka.m',22,0)">line 22</a>)
    J = [J; jacobian(BKS_A_7(1:3,i), q)];

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('run', 'C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\run.m', 11)" style="font-weight:bold">run</a> (<a href="matlab: opentoline('C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\run.m',11,0)">line 11</a>)
    createJacobianKuka()
} 
opentoline('C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\createJacobianKuka.m',22,0)
run
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbquit; end
run
{The following error occurred converting from
sym to double:
Unable to convert expression into double
array.

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('createJacobianKuka', 'C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\createJacobianKuka.m', 14)" style="font-weight:bold">createJacobianKuka</a> (<a href="matlab: opentoline('C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\createJacobianKuka.m',14,0)">line 14</a>)
dhP(:,4) = dhP(:,4) + q

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('run', 'C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\run.m', 11)" style="font-weight:bold">run</a> (<a href="matlab: opentoline('C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\run.m',11,0)">line 11</a>)
    createJacobianKuka()
} 
run
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
{Index in position 2 exceeds array bounds (must
not exceed 4).

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('sym/subsref', 'C:\Program Files\MATLAB\R2019a\toolbox\symbolic\symbolic\@sym\sym.m', 890)" style="font-weight:bold">sym/subsref</a> (<a href="matlab: opentoline('C:\Program Files\MATLAB\R2019a\toolbox\symbolic\symbolic\@sym\sym.m',890,0)">line 890</a>)
            R_tilde =
            builtin('subsref',L_tilde,Idx);

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('createJacobianKuka', 'C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\createJacobianKuka.m', 23)" style="font-weight:bold">createJacobianKuka</a> (<a href="matlab: opentoline('C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\createJacobianKuka.m',23,0)">line 23</a>)
    J = [J; jacobian(BKS_A_7(1:3,i), q)];

Error in <a href="matlab:matlab.internal.language.introspective.errorDocCallback('run', 'C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\run.m', 11)" style="font-weight:bold">run</a> (<a href="matlab: opentoline('C:\Users\Joe Dummy\Desktop\rob\UEBlatt\invKinematics\run.m',11,0)">line 11</a>)
    createJacobianKuka()
} 
run
if system_dependent('IsDebugMode')==1, dbquit all; end
run
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
if system_dependent('IsDebugMode')==1, dbstep; end
 
J =
 
[ sin(theta_7)*(sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - cos(theta_7)*(sin(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)) + cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3)))), - cos(theta_7)*(sin(theta_6)*(cos(theta_1)*cos(theta_2)*cos(theta_4) + cos(theta_1)*cos(theta_3)*sin(theta_2)*sin(theta_4)) - cos(theta_6)*(cos(theta_5)*(cos(theta_1)*cos(theta_2)*sin(theta_4) - cos(theta_1)*cos(theta_3)*cos(theta_4)*sin(theta_2)) + cos(theta_1)*sin(theta_2)*sin(theta_3)*sin(theta_5))) - sin(theta_7)*(sin(theta_5)*(cos(theta_1)*cos(theta_2)*sin(theta_4) - cos(theta_1)*cos(theta_3)*cos(theta_4)*sin(theta_2)) - cos(theta_1)*cos(theta_5)*sin(theta_2)*sin(theta_3)),   cos(theta_7)*(cos(theta_6)*(sin(theta_5)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_4)*cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) - sin(theta_4)*sin(theta_6)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) + sin(theta_7)*(cos(theta_5)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_4)*sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))), - cos(theta_7)*(sin(theta_6)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*cos(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2))) - sin(theta_5)*sin(theta_7)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)),   sin(theta_7)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) + cos(theta_6)*cos(theta_7)*(sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))),     -cos(theta_7)*(cos(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)) - sin(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3)))),   cos(theta_7)*(sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) + sin(theta_7)*(sin(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)) + cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))))]
[ sin(theta_7)*(sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) - cos(theta_7)*(sin(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)) + cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3)))),   cos(theta_7)*(cos(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_1)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_1)*sin(theta_2)) + sin(theta_1)*sin(theta_2)*sin(theta_3)*sin(theta_5)) - sin(theta_6)*(cos(theta_2)*cos(theta_4)*sin(theta_1) + cos(theta_3)*sin(theta_1)*sin(theta_2)*sin(theta_4))) - sin(theta_7)*(sin(theta_5)*(cos(theta_2)*sin(theta_1)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_1)*sin(theta_2)) - cos(theta_5)*sin(theta_1)*sin(theta_2)*sin(theta_3)), - cos(theta_7)*(cos(theta_6)*(sin(theta_5)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - sin(theta_4)*sin(theta_6)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - sin(theta_7)*(cos(theta_5)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + cos(theta_4)*sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))),   cos(theta_7)*(sin(theta_6)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*cos(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2))) + sin(theta_5)*sin(theta_7)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)), - sin(theta_7)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - cos(theta_6)*cos(theta_7)*(sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))),      cos(theta_7)*(cos(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)) - sin(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3)))), - cos(theta_7)*(sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - sin(theta_7)*(sin(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)) + cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))))]
[                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      0,                                                                                                           sin(theta_7)*(sin(theta_5)*(sin(theta_2)*sin(theta_4) + cos(theta_2)*cos(theta_3)*cos(theta_4)) + cos(theta_2)*cos(theta_5)*sin(theta_3)) - cos(theta_7)*(cos(theta_6)*(cos(theta_5)*(sin(theta_2)*sin(theta_4) + cos(theta_2)*cos(theta_3)*cos(theta_4)) - cos(theta_2)*sin(theta_3)*sin(theta_5)) - sin(theta_6)*(cos(theta_4)*sin(theta_2) - cos(theta_2)*cos(theta_3)*sin(theta_4))),                                                                                                                                                                                                                          cos(theta_7)*(cos(theta_6)*(cos(theta_3)*sin(theta_2)*sin(theta_5) + cos(theta_4)*cos(theta_5)*sin(theta_2)*sin(theta_3)) + sin(theta_2)*sin(theta_3)*sin(theta_4)*sin(theta_6)) + sin(theta_7)*(cos(theta_3)*cos(theta_5)*sin(theta_2) - cos(theta_4)*sin(theta_2)*sin(theta_3)*sin(theta_5)),                                                                                                                                                                           cos(theta_7)*(sin(theta_6)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + cos(theta_5)*cos(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4))) - sin(theta_5)*sin(theta_7)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4)),                                                                                                                                                                                                       - sin(theta_7)*(cos(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + sin(theta_2)*sin(theta_3)*sin(theta_5)) - cos(theta_6)*cos(theta_7)*(sin(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) - cos(theta_5)*sin(theta_2)*sin(theta_3)),                                                                                                                                                                -cos(theta_7)*(sin(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + sin(theta_2)*sin(theta_3)*sin(theta_5)) + cos(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4))),                                                                                                                                                                                                                                                               - cos(theta_7)*(sin(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) - cos(theta_5)*sin(theta_2)*sin(theta_3)) - sin(theta_7)*(cos(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + sin(theta_2)*sin(theta_3)*sin(theta_5)) - sin(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4)))]
[ cos(theta_7)*(sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) + sin(theta_7)*(sin(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)) + cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3)))),   sin(theta_7)*(sin(theta_6)*(cos(theta_1)*cos(theta_2)*cos(theta_4) + cos(theta_1)*cos(theta_3)*sin(theta_2)*sin(theta_4)) - cos(theta_6)*(cos(theta_5)*(cos(theta_1)*cos(theta_2)*sin(theta_4) - cos(theta_1)*cos(theta_3)*cos(theta_4)*sin(theta_2)) + cos(theta_1)*sin(theta_2)*sin(theta_3)*sin(theta_5))) - cos(theta_7)*(sin(theta_5)*(cos(theta_1)*cos(theta_2)*sin(theta_4) - cos(theta_1)*cos(theta_3)*cos(theta_4)*sin(theta_2)) - cos(theta_1)*cos(theta_5)*sin(theta_2)*sin(theta_3)),   cos(theta_7)*(cos(theta_5)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_4)*sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) - sin(theta_7)*(cos(theta_6)*(sin(theta_5)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_4)*cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) - sin(theta_4)*sin(theta_6)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))),   sin(theta_7)*(sin(theta_6)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*cos(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2))) - cos(theta_7)*sin(theta_5)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)),   cos(theta_7)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) - cos(theta_6)*sin(theta_7)*(sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))),      sin(theta_7)*(cos(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)) - sin(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3)))),   cos(theta_7)*(sin(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)) + cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3)))) - sin(theta_7)*(sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3)))]
[ cos(theta_7)*(sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) + sin(theta_7)*(sin(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)) + cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3)))), - cos(theta_7)*(sin(theta_5)*(cos(theta_2)*sin(theta_1)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_1)*sin(theta_2)) - cos(theta_5)*sin(theta_1)*sin(theta_2)*sin(theta_3)) - sin(theta_7)*(cos(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_1)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_1)*sin(theta_2)) + sin(theta_1)*sin(theta_2)*sin(theta_3)*sin(theta_5)) - sin(theta_6)*(cos(theta_2)*cos(theta_4)*sin(theta_1) + cos(theta_3)*sin(theta_1)*sin(theta_2)*sin(theta_4))),   sin(theta_7)*(cos(theta_6)*(sin(theta_5)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - sin(theta_4)*sin(theta_6)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - cos(theta_7)*(cos(theta_5)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + cos(theta_4)*sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))),   cos(theta_7)*sin(theta_5)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)) - sin(theta_7)*(sin(theta_6)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*cos(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2))),   cos(theta_6)*sin(theta_7)*(sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - cos(theta_7)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))),     -sin(theta_7)*(cos(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)) - sin(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3)))),   sin(theta_7)*(sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - cos(theta_7)*(sin(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)) + cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))))]
cos(theta_7)*(sin(theta_5)*(sin(theta_2)*sin(theta_4) + cos(theta_2)*cos(theta_3)*cos(theta_4)) + cos(theta_2)*cos(theta_5)*sin(theta_3)) + sin(theta_7)*(cos(theta_6)*(cos(theta_5)*(sin(theta_2)*sin(theta_4) + cos(theta_2)*cos(theta_3)*cos(theta_4)) - cos(theta_2)*sin(theta_3)*sin(theta_5)) - sin(theta_6)*(cos(theta_4)*sin(theta_2) - cos(theta_2)*cos(theta_3)*sin(theta_4))),                                                                                                                                                                                                                          cos(theta_7)*(cos(theta_3)*cos(theta_5)*sin(theta_2) - cos(theta_4)*sin(theta_2)*sin(theta_3)*sin(theta_5)) - sin(theta_7)*(cos(theta_6)*(cos(theta_3)*sin(theta_2)*sin(theta_5) + cos(theta_4)*cos(theta_5)*sin(theta_2)*sin(theta_3)) + sin(theta_2)*sin(theta_3)*sin(theta_4)*sin(theta_6)),                                                                                                                                                                         - sin(theta_7)*(sin(theta_6)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + cos(theta_5)*cos(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4))) - cos(theta_7)*sin(theta_5)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4)),                                                                                                                                                                                                         cos(theta_6)*sin(theta_7)*(sin(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) - cos(theta_5)*sin(theta_2)*sin(theta_3)) - cos(theta_7)*(cos(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + sin(theta_2)*sin(theta_3)*sin(theta_5)),                                                                                                                                                                 sin(theta_7)*(sin(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + sin(theta_2)*sin(theta_3)*sin(theta_5)) + cos(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4))),                                                                                                                                                                                                                                                                 sin(theta_7)*(sin(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) - cos(theta_5)*sin(theta_2)*sin(theta_3)) - cos(theta_7)*(cos(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + sin(theta_2)*sin(theta_3)*sin(theta_5)) - sin(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4)))]
[                                                                                                                                                                                                                                                               cos(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)) - sin(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))),                                                                                                                                                                                                     cos(theta_6)*(cos(theta_1)*cos(theta_2)*cos(theta_4) + cos(theta_1)*cos(theta_3)*sin(theta_2)*sin(theta_4)) + sin(theta_6)*(cos(theta_5)*(cos(theta_1)*cos(theta_2)*sin(theta_4) - cos(theta_1)*cos(theta_3)*cos(theta_4)*sin(theta_2)) + cos(theta_1)*sin(theta_2)*sin(theta_3)*sin(theta_5)),                                                                                                                                                                                                                      sin(theta_6)*(sin(theta_5)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_4)*cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))) + cos(theta_6)*sin(theta_4)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3)),                                                                                                                                                                           cos(theta_6)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + cos(theta_5)*sin(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)),                                                                                                                                                                                                                                                               sin(theta_6)*(sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))),                   - sin(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)) - cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta
[                                                                                                                                                                                                                                                               cos(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)) - sin(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))),                                                                                                                                                                                                     sin(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_1)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_1)*sin(theta_2)) + sin(theta_1)*sin(theta_2)*sin(theta_3)*sin(theta_5)) + cos(theta_6)*(cos(theta_2)*cos(theta_4)*sin(theta_1) + cos(theta_3)*sin(theta_1)*sin(theta_2)*sin(theta_4)),                                                                                                                                                                                                                    - sin(theta_6)*(sin(theta_5)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))) - cos(theta_6)*sin(theta_4)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3)),                                                                                                                                                                         - cos(theta_6)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*sin(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)),                                                                                                                                                                                                                                                              -sin(theta_6)*(sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))),                     sin(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)) + cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta
[                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      0,                                                                                                                                                                                                                                                                    - sin(theta_6)*(cos(theta_5)*(sin(theta_2)*sin(theta_4) + cos(theta_2)*cos(theta_3)*cos(theta_4)) - cos(theta_2)*sin(theta_3)*sin(theta_5)) - cos(theta_6)*(cos(theta_4)*sin(theta_2) - cos(theta_2)*cos(theta_3)*sin(theta_4)),                                                                                                                                                                                                                                                                                                                                                       sin(theta_6)*(cos(theta_3)*sin(theta_2)*sin(theta_5) + cos(theta_4)*cos(theta_5)*sin(theta_2)*sin(theta_3)) - cos(theta_6)*sin(theta_2)*sin(theta_3)*sin(theta_4),                                                                                                                                                                                                                                                                                           cos(theta_5)*sin(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4)) - cos(theta_6)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)),                                                                                                                                                                                                                                                                                                                                                                 -sin(theta_6)*(sin(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) - cos(theta_5)*sin(theta_2)*sin(theta_3)),                                                                                                                                                                                cos(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + sin(theta_2)*sin(theta_3)*sin(theta_5)) - sin(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta
[                                                                  (63*cos(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)))/500 - (2*sin(theta_1)*sin(theta_2))/5 + (2*sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)))/5 - (63*sin(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))))/500 - (2*cos(theta_4)*sin(theta_1)*sin(theta_2))/5,                                      (2*cos(theta_1)*cos(theta_2))/5 + (63*cos(theta_6)*(cos(theta_1)*cos(theta_2)*cos(theta_4) + cos(theta_1)*cos(theta_3)*sin(theta_2)*sin(theta_4)))/500 + (63*sin(theta_6)*(cos(theta_5)*(cos(theta_1)*cos(theta_2)*sin(theta_4) - cos(theta_1)*cos(theta_3)*cos(theta_4)*sin(theta_2)) + cos(theta_1)*sin(theta_2)*sin(theta_3)*sin(theta_5)))/500 + (2*cos(theta_1)*cos(theta_2)*cos(theta_4))/5 + (2*cos(theta_1)*cos(theta_3)*sin(theta_2)*sin(theta_4))/5,                                                                                                          (2*sin(theta_4)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3)))/5 + (63*sin(theta_6)*(sin(theta_5)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_4)*cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))))/500 + (63*cos(theta_6)*sin(theta_4)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3)))/500,                (63*cos(theta_6)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)))/500 + (2*cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)))/5 - (2*cos(theta_1)*sin(theta_2)*sin(theta_4))/5 + (63*cos(theta_5)*sin(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)))/500,                                                                                                                                                                                                                                                      (63*sin(theta_6)*(sin(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))))/500, - (63*sin(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)))/500 - (63*cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta
[                                                                  (2*cos(theta_1)*sin(theta_2))/5 + (63*cos(theta_6)*(sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) + cos(theta_1)*cos(theta_4)*sin(theta_2)))/500 - (63*sin(theta_6)*(cos(theta_5)*(cos(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)) - cos(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_3)*sin(theta_1) + cos(theta_1)*cos(theta_2)*sin(theta_3))))/500 + (2*sin(theta_4)*(sin(theta_1)*sin(theta_3) - cos(theta_1)*cos(theta_2)*cos(theta_3)))/5 + (2*cos(theta_1)*cos(theta_4)*sin(theta_2))/5,                                      (2*cos(theta_2)*sin(theta_1))/5 + (63*sin(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_1)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_1)*sin(theta_2)) + sin(theta_1)*sin(theta_2)*sin(theta_3)*sin(theta_5)))/500 + (63*cos(theta_6)*(cos(theta_2)*cos(theta_4)*sin(theta_1) + cos(theta_3)*sin(theta_1)*sin(theta_2)*sin(theta_4)))/500 + (2*cos(theta_2)*cos(theta_4)*sin(theta_1))/5 + (2*cos(theta_3)*sin(theta_1)*sin(theta_2)*sin(theta_4))/5,                                                                                                        - (2*sin(theta_4)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3)))/5 - (63*sin(theta_6)*(sin(theta_5)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))))/500 - (63*cos(theta_6)*sin(theta_4)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3)))/500,              - (63*cos(theta_6)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)))/500 - (2*cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)))/5 - (2*sin(theta_1)*sin(theta_2)*sin(theta_4))/5 - (63*cos(theta_5)*sin(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)))/500,                                                                                                                                                                                                                                                     -(63*sin(theta_6)*(sin(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) - cos(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))))/500,   (63*sin(theta_6)*(sin(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) - cos(theta_4)*sin(theta_1)*sin(theta_2)))/500 + (63*cos(theta_6)*(cos(theta_5)*(cos(theta_4)*(cos(theta_1)*sin(theta_3) + cos(theta_2)*cos(theta_3)*sin(theta_1)) + sin(theta_1)*sin(theta_2)*sin(theta_4)) + sin(theta_5)*(cos(theta_1)*cos(theta_3) - cos(theta_2)*sin(theta_1)*sin(theta_3))))/500,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        0]
cos(theta_2)*cos(theta_3)*sin(theta_4))/5 - (2*cos(theta_4)*sin(theta_2))/5 - (63*sin(theta_6)*(cos(theta_5)*(sin(theta_2)*sin(theta_4) + cos(theta_2)*cos(theta_3)*cos(theta_4)) - cos(theta_2)*sin(theta_3)*sin(theta_5)))/500 - (63*cos(theta_6)*(cos(theta_4)*sin(theta_2) - cos(theta_2)*cos(theta_3)*sin(theta_4)))/500 - (2*sin(theta_2))/5,                                                                                                                                                                                                                                                                                      (63*sin(theta_6)*(cos(theta_3)*sin(theta_2)*sin(theta_5) + cos(theta_4)*cos(theta_5)*sin(theta_2)*sin(theta_3)))/500 - (2*sin(theta_2)*sin(theta_3)*sin(theta_4))/5 - (63*cos(theta_6)*sin(theta_2)*sin(theta_3)*sin(theta_4))/500,                                                                                                                                                                                        (63*cos(theta_5)*sin(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta_4)))/500 - (63*cos(theta_6)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)))/500 - (2*cos(theta_2)*sin(theta_4))/5 + (2*cos(theta_3)*cos(theta_4)*sin(theta_2))/5,                                                                                                                                                                                                                                                                                                                                                        -(63*sin(theta_6)*(sin(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) - cos(theta_5)*sin(theta_2)*sin(theta_3)))/500,                                                                                                                                                              (63*cos(theta_6)*(cos(theta_5)*(cos(theta_2)*sin(theta_4) - cos(theta_3)*cos(theta_4)*sin(theta_2)) + sin(theta_2)*sin(theta_3)*sin(theta_5)))/500 - (63*sin(theta_6)*(cos(theta_2)*cos(theta_4) + cos(theta_3)*sin(theta_2)*sin(theta
 
if system_dependent('IsDebugMode')==1, dbstep; end
